name: CI
on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  BUILD_TARGET: "x86_64-unknown-linux-gnu"

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-debug-${{ hashFiles('**/Cargo.lock') }}-is

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup Redis
        uses: shogo82148/actions-setup-redis@v1.29.0
        with:
          redis-version: latest
          auto-start: false
      - name: Check formatting
        run: cargo fmt -- --check
      - name: Clippy
        run: cargo clippy -- -Dwarnings
      - name: Unit tests
        run: cargo test --lib --bins --all-features
      - name: "Worker Executor integration tests"
        run: WASMTIME_BACKTRACE_DETAILS=1 cargo test --package golem-worker-executor-base --test '*' -- --nocapture
      - name: Generate Golem OpenAPI yaml
        working-directory: golem-cloud-server-oss
        run: |
          cargo build
          ../target/debug/cloud-server-oss-yaml > ../target/golem-cloud-server-oss.yaml
      - name: Check Golem OpenAPI yaml latest
        shell: bash
        run: |
          if diff openapi/golem-cloud-server-oss.yaml target/golem-cloud-server-oss.yaml  >/dev/null 2>&1
            then
              echo "Latest Golem OpenAPI spec version detected."
            else
              echo "openapi/golem-cloud-server-oss.yaml is not the same as produced by cloud-server-oss-yaml." 1>&2
              echo "Run ./scripts/generate-openapi-yaml.sh to generate new spec." 1>&2
              exit 1
          fi
      - name: Generate Golem client
        working-directory: golem-openapi-client-generator
        run: |
          cargo build
          ./target/debug/golem-openapi-client-generator --spec-yaml ../openapi/golem-cloud-server-oss.yaml --output-directory ../golem-client --name "golem-client" --client-version "0.0.0"
      - name: Compile Golem client
        working-directory: golem-client
        run: cargo build
  publish:
    needs: [build]
    if: "startsWith(github.ref, 'refs/tags/v')"
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-debug-${{ hashFiles('**/Cargo.lock') }}-is

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}
      - id: get_version
        uses: battila7/get-version-action@v2
      - name: Generate Golem client
        working-directory: golem-openapi-client-generator
        run: |
          export VERSION="${{ steps.get_version.outputs.version-without-v }}"
          cargo build
          ./target/debug/golem-openapi-client-generator --spec-yaml ../openapi/golem-cloud-server-oss.yaml --output-directory ../golem-client --name "golem-client" --client-version "${VERSION}"
      - name: Publish Golem client
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        working-directory: golem-client
        run: cargo publish --all-features --allow-dirty
      - name: Publish crate
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          export VERSION="${{ steps.get_version.outputs.version-without-v }}"
          sed -i "s/0.0.0/$VERSION/g" golem-api-grpc/Cargo.toml
          sed -i "s/0.0.0/$VERSION/g" golem-common/Cargo.toml
          sed -i "s/0.0.0/$VERSION/g" golem-worker-executor-base/Cargo.toml
          sed -i "s/0.0.0/$VERSION/g" golem-worker-executor-oss/Cargo.toml
          cargo publish -p golem-api-grpc --all-features --allow-dirty
          cargo publish -p golem-common --all-features --allow-dirty
          cargo publish -p golem-worker-executor-base --all-features --allow-dirty
          cargo publish -p golem-worker-executor-oss --all-features --allow-dirty

  docker-publish-x86_64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust Targets
        run: |
          rustup target add x86_64-unknown-linux-gnu

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Build amd64 Executables
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      # Set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: Push Decision
        id: push_decision
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "::set-output name=push::true"
          else
            echo "::set-output name=push::false"
          fi

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Run Docker Compose tests
        run: |
          docker-compose -f docker-compose-sqlite.yml down -v
          docker-compose -f docker-compose-sqlite.yml up --build -d

      # Not necessary but just in case
      - name: Sleep for 20 seconds
        run: |
          sleep 20

      - name: Run some tests against service
        run: |
          curl -X GET http://localhost:9001/v2/templates
          curl -X POST http://localhost:9001/v2/templates -H "Content-Type: multipart/form-data" -F "name=mytemplate" -F "template=@test-templates/shopping-cart.wasm"

      - name: Pull down docker
        run: |
          docker-compose -f docker-compose-sqlite.yml down -v     

      # Login to docker hub
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Extract metadata (tags, labels) for worker executor
      - name: Extract metadata (tags, labels) for worker executor
        id: meta-worker-executor
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-worker-executor

      # Build and push worker executor image
      - name: Build and push worker executor image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./golem-worker-executor-oss/docker/Dockerfile
          push: ${{ steps.push_decision.outputs.push }}
          platforms: linux/amd64
          tags: ${{ steps.meta-worker-executor.outputs.tags }}
          labels: ${{ steps.meta-worker-executor.outputs.labels }}


      # Extract metadata (tags, labels) for shard manager
      - name: Extract metadata (tags, labels) for shard manager
        id: meta-shard-manager
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-shard-manager

      # Build and push shard manager image
      - name: Build and push shard manager image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./golem-shard-manager/docker/Dockerfile
          push: ${{ steps.push_decision.outputs.push }}
          platforms: linux/amd64
          tags: ${{ steps.meta-shard-manager.outputs.tags }}
          labels: ${{ steps.meta-shard-manager.outputs.labels }}

      # Extract metadata (tags, labels) for golem server
      - name: Extract metadata (tags, labels) for golem server
        id: meta-golem-server
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-server

      # Build and push cloud server image
      - name: Build and push cloud server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./golem-cloud-server-oss/docker/Dockerfile
          push: ${{ steps.push_decision.outputs.push }}
          platforms: linux/amd64
          tags: ${{ steps.meta-golem-server.outputs.tags }}
          labels: ${{ steps.meta-golem-server.outputs.labels }}


  docker-publish-aarch64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust Targets
        run: |
          rustup target add aarch64-unknown-linux-gnu

      - name: Install gcc-aarch64-linux-gnu
        run: |
          sudo apt-get update
          sudo apt-get install gcc-aarch64-linux-gnu

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Build aarch64 Executables
        run: |
          cargo build --release --target aarch64-unknown-linux-gnu --config "target.aarch64-unknown-linux-gnu.linker = 'aarch64-linux-gnu-gcc'"

      # Set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - uses: satackey/action-docker-layer-caching@v0.0.11
        continue-on-error: true

      - name: Push Decision
        id: push_decision
        run: |
          if [[ "${{ github.ref }}" == "refs/tags/v"* ]]; then
            echo "::set-output name=push::true"
          else
            echo "::set-output name=push::false"
          fi

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to docker hub
      - name: Log in to Docker Hub
        uses: docker/login-action@f4ef78c080cd8ba55a85445d5b36e214a81df20a
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Extract metadata (tags, labels) for worker executor
      - name: Extract metadata (tags, labels) for worker executor
        id: meta-worker-executor
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-worker-executor

      # Build and push worker executor image
      - name: Build and push worker executor image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./golem-worker-executor-oss/docker/Dockerfile
          push: ${{ steps.push_decision.outputs.push }}
          platforms: linux/arm64
          tags: ${{ steps.meta-worker-executor.outputs.tags }}
          labels: ${{ steps.meta-worker-executor.outputs.labels }}


      # Extract metadata (tags, labels) for shard manager
      - name: Extract metadata (tags, labels) for shard manager
        id: meta-shard-manager
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-shard-manager

      # Build and push shard manager image
      - name: Build and push shard manager image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./golem-shard-manager/docker/Dockerfile
          push: ${{ steps.push_decision.outputs.push }}
          platforms: linux/arm64
          tags: ${{ steps.meta-shard-manager.outputs.tags }}
          labels: ${{ steps.meta-shard-manager.outputs.labels }}

      # Extract metadata (tags, labels) for golem server
      - name: Extract metadata (tags, labels) for golem server
        id: meta-golem-server
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-server

      # Build and push cloud server image
      - name: Build and push cloud server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./golem-cloud-server-oss/docker/Dockerfile
          push: ${{ steps.push_decision.outputs.push }}
          platforms: linux/arm64
          tags: ${{ steps.meta-golem-server.outputs.tags }}
          labels: ${{ steps.meta-golem-server.outputs.labels }}
