name: CI

on:
  push:
    tags:
      - "v*.*.*"
    branches:
      - main
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      # Setup Rust
      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      # Install Protoc
      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      # Setup Redis
      - name: Setup Redis
        uses: shogo82148/actions-setup-redis@v1.29.0
        with:
          redis-version: latest
          auto-start: false

      # Check formatting
      - name: Check formatting
        run: cargo fmt -- --check

      # Clippy
      - name: Clippy
        run: cargo clippy -- -Dwarnings

      # Unit tests
      - name: Unit tests
        run: cargo test --lib --bins --all-features

      # Worker Executor integration tests
      - name: "Worker Executor integration tests"
        run: WASMTIME_BACKTRACE_DETAILS=1 cargo test --package golem-worker-executor-base --test '*' -- --nocapture

      # Generate Golem OpenAPI yaml
      - name: Generate Golem OpenAPI yaml
        working-directory: golem-cloud-server-oss
        run: |
          cargo build
          ../target/debug/cloud-server-oss-yaml > ../target/golem-cloud-server-oss.yaml

      # Check Golem OpenAPI yaml latest
      - name: Check Golem OpenAPI yaml latest
        shell: bash
        run: |
          if diff openapi/golem-cloud-server-oss.yaml target/golem-cloud-server-oss.yaml  >/dev/null 2>&1
            then
              echo "Latest Golem OpenAPI spec version detected."
            else
              echo "openapi/golem-cloud-server-oss.yaml is not the same as produced by cloud-server-oss-yaml." 1>&2
              echo "Run ./scripts/generate-openapi-yaml.sh to generate new spec." 1>&2
              exit 1
          fi

      # Generate Golem client
      - name: Generate Golem client
        working-directory: golem-openapi-client-generator
        run: |
          cargo build
          ./target/debug/golem-openapi-client-generator --spec-yaml ../openapi/golem-cloud-server-oss.yaml --output-directory ../golem-client --name "golem-client" --client-version "0.0.0"

      # Compile Golem client
      - name: Compile Golem client
        working-directory: golem-client
        run: cargo build

  docker-publish-amd64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Setup Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable
          override: true

      - name: Install Rust Targets
        run: |
          rustup target add x86_64-unknown-linux-gnu

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-release-${{ hashFiles('**/Cargo.lock') }}

      - name: Build amd64 Executables
        run: |
          cargo build --release --target x86_64-unknown-linux-gnu

      # Set up QEMU
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      # Set up Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Extract metadata (tags, labels) for worker executor
      - name: Extract metadata (tags, labels) for worker executor
        id: meta-worker-executor
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-worker-executor

      # Build and push worker executor image
      - name: Build and push worker executor image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./golem-worker-executor-oss/docker/Dockerfile
          push: github.event_name == 'push' && github.ref_type == 'tag'
          platforms: linux/amd64
          tags: ${{ steps.meta-worker-executor.outputs.tags }}
          labels: ${{ steps.meta-worker-executor.outputs.labels }}

      # Extract metadata (tags, labels) for shard manager
      - name: Extract metadata (tags, labels) for shard manager
        id: meta-shard-manager
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-shard-manager

      # Build and push shard manager image
      - name: Build and push shard manager image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./golem-shard-manager/docker/Dockerfile
          push: github.event_name == 'push' && github.ref_type == 'tag'
          platforms: linux/amd64
          tags: ${{ steps.meta-shard-manager.outputs.tags }}
          labels: ${{ steps.meta-shard-manager.outputs.labels }}

      # Extract metadata (tags, labels) for golem server
      - name: Extract metadata (tags, labels) for golem server
        id: meta-golem-server
        uses: docker/metadata-action@v5
        with:
          images: golemservices/golem-server

      # Build and push cloud server image
      - name: Build and push cloud server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./golem-cloud-server-oss/docker/Dockerfile
          push: github.event_name == 'push' && github.ref_type == 'tag'
          platforms: linux/amd64
          tags: ${{ steps.meta-golem-server.outputs.tags }}
          labels: ${{ steps.meta-golem-server.outputs.labels }}
